#!/usr/bin/env python

###############################################################################
#
# Copyright 2012
# The Intellisis Corporation
#
# All rights reserved.
#
# $Id: $
#
###############################################################################

'''
This removes "?" lines that don't matter in the svn status report
'''

# Python modules
import os
import sys
import subprocess


###############################################################################
# Some constants that control behavior

excludedDirs = [
    "logs",
    "cache",
    "answrcache",
]

excludedEndings = [
    ".os",
    ".cache",
    ".wpr",
    ".wpu",
    ".pkl",
    ".npz",
    ".db",
    ".tmp"
]

# Extentions to look into to see if SWIG generated
# 2nd item is the line to examine
swigList = [
    (".py", 1),
    (".cc", 2),
]

# Not yet implemented
# Not needed?
#excludedName = [
	#".os",
#]

# ?       answr/oberon/tonedtmf/fft.os
# 012345678
PATH_START = 8


#----------------------------------------------------------------------
def svn_status_subprocess(arg_list=None):
	"""
	Grab the svn status for the (args) supplied
	"""

	# Set up the svn status command
	args = ['svn', 'status']

	# Add any args passed in
	if arg_list is not None:
		args.extend(arg_list)

	# Start the subprocess
	proc = subprocess.Popen(args, stdout=subprocess.PIPE)

	return proc


#----------------------------------------------------------------------
def monitor_stdout(process):
	"""
	Monitor the output processing as we go
	"""

	# There are nothing pending
	external_status_pending = None

	# poll returns None until the process completes
	while process.poll() is None:

		# Grab the next line
		line_in = process.stdout.readline().strip()

		# Toss blank lines
		if len(line_in) > 0:

			# A little special processing for external status lines
			# They may have no data under them, so defer them
			if line_in.startswith("Performing status"):

				# Defer this
				external_status_pending = line_in

			else:
				# Proces to remove unwanted status lines
				new_status = process_status_line(line_in)

				# If this a wanted status line?
				if new_status is not None:

					# Now that we have a status line to print,
					#  see if we need to insert a deferred
					#  external status line
					if external_status_pending is not None:
						print
						print external_status_pending
						external_status_pending = None

					# Send out the new status
					print new_status


#----------------------------------------------------------------------
def process_status_line(status_line):
	"""
	Process the status according to the first character
	"""
	# First char to process_xxx map
	process_map = {
		    'X': process_X,
		    '?': process_QuestionMark,
		    }

	# Process defined by the first char in the status line
	first_char = status_line[0]

	# Send to the proper process
	if first_char in process_map:
		return process_map[first_char](status_line)

	# Not in the list, return the original line
	return status_line


#----------------------------------------------------------------------
def process_X(dummy):
	"""
	Remove X status
	"""

	# Nuke the line
	return None


#----------------------------------------------------------------------
def process_QuestionMark(status_line):
	"""
	Remove auto-generated files (SWIG only)
	Remove excluded dirs & exts
	"""

	# Trim off svn status indicators
	filename = status_line[PATH_START:]

	# Remove dirs we don't care about
	dname = os.path.dirname(filename)
	for excludedDir in excludedDirs:
		if excludedDir in dname.split(os.path.sep):
			# Nuke the line
			return None

	# Remove extensions we don't care about
	for ending in excludedEndings:
		if filename.endswith(ending):
			# Nuke the line
			return None

	# File or Dir?
	if not os.path.isfile(filename):
		# Mark dirs with a '/ (dir)'
		status_line += os.path.sep + " (dir)"
	else:
		# Look at files to exclude swig files
		for ext, line_no in swigList:
			if filename.endswith(ext):
				# exclude if a SWIG file
				fd = open(filename)
				# Read to the correrct line
				for _ in xrange(line_no):
					line_in = fd.readline()
				fd.close()

				# Examine the line_in
				if 'generated by SWIG' in line_in:
					# Nuke the line
					return None

	# Made it thru the filters, return it
	return status_line


###############################################################################
if __name__ == "__main__":

	svn_proc = svn_status_subprocess(sys.argv[1:])

	monitor_stdout(svn_proc)

	exit(0)
