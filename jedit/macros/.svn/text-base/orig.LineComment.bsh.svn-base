int[] lines = textArea.getSelectedLines();

String file_name = buffer.getName();

Mode m = buffer.getMode();

String mode = m.getName();
String comment = "#~";
int	comment_length = 2;

String eol_comment = "";
boolean use_eol_comment = false;

if(mode.equals("c") || mode.equals("c++"))
{
	comment = "//~";
	comment_length = 3;
}
else if(mode.equals("matlab") || file_name.endsWith(".m"))
{
	comment = "%~";
	comment_length = 2;
}

else if(mode.equals("latex") || file_name.endsWith(".tex"))
{
	comment = "%~";
	comment_length = 2;
}

else if(mode.equals("rest"))
{
	comment = ".. //~";
	comment_length = 6;
}
else if(mode.equals("xml"))
{
	comment	 = "<!--~ ";
	comment_length = 6;

	eol_comment = "  ~-->"; // Make it 6 chars also!

	use_eol_comment = true;
}


for(int i = 0; i < lines.length; ++i)
{
	line = lines[i];
	index = line - lines[0];
	start = buffer.getLineStartOffset(line);
	end = buffer.getLineEndOffset(line);
	text = buffer.getText(start,end - start - 1);

	if(text.length() == 0) continue;

	///////////////////////////////////////////////////////////////////////////
	// Special handeling, convert old C comments
	if(text.startsWith("/*") && text.length() == 2)
	{
		newText = "//";
	}
	else if(text.startsWith(" * "))
	{
		newText = "// " + text.substring(3);
	}
	else if(text.startsWith(" */") && text.length() == 3)
	{
		newText = "//";
	}
	else if(text.startsWith("*/") && text.length() == 2)
	{
		newText = "//";
	}

	///////////////////////////////////////////////////////////////////////////
	// Check if text line begins with comment text.
	else if(text.startsWith(comment))
	{
		if(use_eol_comment)
		{
			newText = buffer.getText(start + comment_length, end - start - 2*comment_length - 1);
		}
		else
		{
			newText = buffer.getText(start + comment_length, end - start - comment_length - 1);
		}
	}
	else
	{
		if(use_eol_comment)
		{
			newText = comment + text + eol_comment;
		}
		else
		{
			newText = comment + text;
		}
	}

	if(newText != null)
	{
		buffer.remove(start,end - start - 1);
		buffer.insert(start,String.valueOf(newText));
	}
}

//BeanShell.showEvaluateLinesDialog(view);